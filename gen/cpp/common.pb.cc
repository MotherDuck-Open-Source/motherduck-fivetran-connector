// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace fivetran_sdk {
template <typename>
PROTOBUF_CONSTEXPR ConfigurationFormRequest::ConfigurationFormRequest(
    ::_pbi::ConstantInitialized) {}
struct ConfigurationFormRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationFormRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationFormRequestDefaultTypeInternal() {}
  union {
    ConfigurationFormRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationFormRequestDefaultTypeInternal _ConfigurationFormRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConfigurationFormResponse::ConfigurationFormResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.tests_)*/{}
  , /*decltype(_impl_.schema_selection_supported_)*/ false

  , /*decltype(_impl_.table_selection_supported_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationFormResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationFormResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationFormResponseDefaultTypeInternal() {}
  union {
    ConfigurationFormResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationFormResponseDefaultTypeInternal _ConfigurationFormResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FormField::FormField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.required_)*/ false

  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FormFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormFieldDefaultTypeInternal() {}
  union {
    FormField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormFieldDefaultTypeInternal _FormField_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DropdownField::DropdownField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dropdown_field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropdownFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropdownFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropdownFieldDefaultTypeInternal() {}
  union {
    DropdownField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropdownFieldDefaultTypeInternal _DropdownField_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ToggleField::ToggleField(
    ::_pbi::ConstantInitialized) {}
struct ToggleFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToggleFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToggleFieldDefaultTypeInternal() {}
  union {
    ToggleField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToggleFieldDefaultTypeInternal _ToggleField_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConfigurationTest::ConfigurationTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationTestDefaultTypeInternal() {}
  union {
    ConfigurationTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationTestDefaultTypeInternal _ConfigurationTest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestRequest_ConfigurationEntry_DoNotUse::TestRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _TestRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestRequest::TestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequestDefaultTypeInternal() {}
  union {
    TestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequestDefaultTypeInternal _TestRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestResponse::TestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestResponseDefaultTypeInternal() {}
  union {
    TestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestResponseDefaultTypeInternal _TestResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SchemaList::SchemaList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schemas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SchemaListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchemaListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchemaListDefaultTypeInternal() {}
  union {
    SchemaList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchemaListDefaultTypeInternal _SchemaList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TableList::TableList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableListDefaultTypeInternal() {}
  union {
    TableList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableListDefaultTypeInternal _TableList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Schema::Schema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tables_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchemaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchemaDefaultTypeInternal _Schema_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DecimalParams::DecimalParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.precision_)*/ 0u

  , /*decltype(_impl_.scale_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DecimalParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecimalParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecimalParamsDefaultTypeInternal() {}
  union {
    DecimalParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecimalParamsDefaultTypeInternal _DecimalParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValueType::ValueType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inner_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ValueTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueTypeDefaultTypeInternal() {}
  union {
    ValueType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueTypeDefaultTypeInternal _ValueType_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Table::Table(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefaultTypeInternal _Table_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Column::Column(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.decimal_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.primary_key_)*/ false
} {}
struct ColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnDefaultTypeInternal() {}
  union {
    Column _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnDefaultTypeInternal _Column_default_instance_;
}  // namespace fivetran_sdk
static ::_pb::Metadata file_level_metadata_common_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2eproto = nullptr;
const ::uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormResponse, _impl_.schema_selection_supported_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormResponse, _impl_.table_selection_supported_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormResponse, _impl_.fields_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationFormResponse, _impl_.tests_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_.required_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_.description_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_.type_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DropdownField, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DropdownField, _impl_.dropdown_field_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ToggleField, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationTest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationTest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ConfigurationTest, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestRequest, _impl_.configuration_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestResponse, _impl_.response_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::SchemaList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::SchemaList, _impl_.schemas_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TableList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TableList, _impl_.tables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Schema, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Schema, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Schema, _impl_.tables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DecimalParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DecimalParams, _impl_.precision_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DecimalParams, _impl_.scale_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ValueType, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ValueType, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ValueType, _impl_.inner_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Table, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Table, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Table, _impl_.columns_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _impl_.primary_key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::Column, _impl_.decimal_),
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::fivetran_sdk::ConfigurationFormRequest)},
        { 8, -1, -1, sizeof(::fivetran_sdk::ConfigurationFormResponse)},
        { 20, 36, -1, sizeof(::fivetran_sdk::FormField)},
        { 43, -1, -1, sizeof(::fivetran_sdk::DropdownField)},
        { 52, -1, -1, sizeof(::fivetran_sdk::ToggleField)},
        { 60, -1, -1, sizeof(::fivetran_sdk::ConfigurationTest)},
        { 70, 80, -1, sizeof(::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse)},
        { 82, -1, -1, sizeof(::fivetran_sdk::TestRequest)},
        { 92, -1, -1, sizeof(::fivetran_sdk::TestResponse)},
        { 103, -1, -1, sizeof(::fivetran_sdk::SchemaList)},
        { 112, -1, -1, sizeof(::fivetran_sdk::TableList)},
        { 121, -1, -1, sizeof(::fivetran_sdk::Schema)},
        { 131, -1, -1, sizeof(::fivetran_sdk::DecimalParams)},
        { 141, -1, -1, sizeof(::fivetran_sdk::ValueType)},
        { 165, -1, -1, sizeof(::fivetran_sdk::Table)},
        { 175, 187, -1, sizeof(::fivetran_sdk::Column)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::fivetran_sdk::_ConfigurationFormRequest_default_instance_._instance,
    &::fivetran_sdk::_ConfigurationFormResponse_default_instance_._instance,
    &::fivetran_sdk::_FormField_default_instance_._instance,
    &::fivetran_sdk::_DropdownField_default_instance_._instance,
    &::fivetran_sdk::_ToggleField_default_instance_._instance,
    &::fivetran_sdk::_ConfigurationTest_default_instance_._instance,
    &::fivetran_sdk::_TestRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_TestRequest_default_instance_._instance,
    &::fivetran_sdk::_TestResponse_default_instance_._instance,
    &::fivetran_sdk::_SchemaList_default_instance_._instance,
    &::fivetran_sdk::_TableList_default_instance_._instance,
    &::fivetran_sdk::_Schema_default_instance_._instance,
    &::fivetran_sdk::_DecimalParams_default_instance_._instance,
    &::fivetran_sdk::_ValueType_default_instance_._instance,
    &::fivetran_sdk::_Table_default_instance_._instance,
    &::fivetran_sdk::_Column_default_instance_._instance,
};
const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014common.proto\022\014fivetran_sdk\032\037google/pro"
    "tobuf/timestamp.proto\"\032\n\030ConfigurationFo"
    "rmRequest\"\273\001\n\031ConfigurationFormResponse\022"
    "\"\n\032schema_selection_supported\030\001 \001(\010\022!\n\031t"
    "able_selection_supported\030\002 \001(\010\022\'\n\006fields"
    "\030\003 \003(\0132\027.fivetran_sdk.FormField\022.\n\005tests"
    "\030\004 \003(\0132\037.fivetran_sdk.ConfigurationTest\""
    "\205\002\n\tFormField\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001"
    "(\t\022\020\n\010required\030\003 \001(\010\022\030\n\013description\030\004 \001("
    "\tH\001\210\001\001\022-\n\ntext_field\030\005 \001(\0162\027.fivetran_sd"
    "k.TextFieldH\000\0225\n\016dropdown_field\030\006 \001(\0132\033."
    "fivetran_sdk.DropdownFieldH\000\0221\n\014toggle_f"
    "ield\030\007 \001(\0132\031.fivetran_sdk.ToggleFieldH\000B"
    "\006\n\004typeB\016\n\014_description\"\'\n\rDropdownField"
    "\022\026\n\016dropdown_field\030\001 \003(\t\"\r\n\013ToggleField\""
    "0\n\021ConfigurationTest\022\014\n\004name\030\001 \001(\t\022\r\n\005la"
    "bel\030\002 \001(\t\"\226\001\n\013TestRequest\022\014\n\004name\030\001 \001(\t\022"
    "C\n\rconfiguration\030\002 \003(\0132,.fivetran_sdk.Te"
    "stRequest.ConfigurationEntry\0324\n\022Configur"
    "ationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"@\n\014TestResponse\022\021\n\007success\030\001 \001(\010H\000\022\021\n"
    "\007failure\030\002 \001(\tH\000B\n\n\010response\"3\n\nSchemaLi"
    "st\022%\n\007schemas\030\001 \003(\0132\024.fivetran_sdk.Schem"
    "a\"0\n\tTableList\022#\n\006tables\030\001 \003(\0132\023.fivetra"
    "n_sdk.Table\";\n\006Schema\022\014\n\004name\030\001 \001(\t\022#\n\006t"
    "ables\030\002 \003(\0132\023.fivetran_sdk.Table\"1\n\rDeci"
    "malParams\022\021\n\tprecision\030\001 \001(\r\022\r\n\005scale\030\002 "
    "\001(\r\"\371\002\n\tValueType\022\016\n\004null\030\001 \001(\010H\000\022\016\n\004boo"
    "l\030\002 \001(\010H\000\022\017\n\005short\030\003 \001(\005H\000\022\r\n\003int\030\004 \001(\005H"
    "\000\022\016\n\004long\030\005 \001(\003H\000\022\017\n\005float\030\006 \001(\002H\000\022\020\n\006do"
    "uble\030\007 \001(\001H\000\0220\n\nnaive_date\030\010 \001(\0132\032.googl"
    "e.protobuf.TimestampH\000\0224\n\016naive_datetime"
    "\030\t \001(\0132\032.google.protobuf.TimestampH\000\0222\n\014"
    "utc_datetime\030\n \001(\0132\032.google.protobuf.Tim"
    "estampH\000\022\021\n\007decimal\030\013 \001(\tH\000\022\020\n\006binary\030\014 "
    "\001(\014H\000\022\020\n\006string\030\r \001(\tH\000\022\016\n\004json\030\016 \001(\tH\000\022"
    "\r\n\003xml\030\017 \001(\tH\000B\007\n\005inner\"<\n\005Table\022\014\n\004name"
    "\030\001 \001(\t\022%\n\007columns\030\002 \003(\0132\024.fivetran_sdk.C"
    "olumn\"\220\001\n\006Column\022\014\n\004name\030\001 \001(\t\022$\n\004type\030\002"
    " \001(\0162\026.fivetran_sdk.DataType\022\023\n\013primary_"
    "key\030\003 \001(\010\0221\n\007decimal\030\004 \001(\0132\033.fivetran_sd"
    "k.DecimalParamsH\000\210\001\001B\n\n\010_decimal*4\n\tText"
    "Field\022\r\n\tPlainText\020\000\022\014\n\010Password\020\001\022\n\n\006Hi"
    "dden\020\002*\313\001\n\010DataType\022\017\n\013UNSPECIFIED\020\000\022\013\n\007"
    "BOOLEAN\020\001\022\t\n\005SHORT\020\002\022\007\n\003INT\020\003\022\010\n\004LONG\020\004\022"
    "\013\n\007DECIMAL\020\005\022\t\n\005FLOAT\020\006\022\n\n\006DOUBLE\020\007\022\016\n\nN"
    "AIVE_DATE\020\010\022\022\n\016NAIVE_DATETIME\020\t\022\020\n\014UTC_D"
    "ATETIME\020\n\022\n\n\006BINARY\020\013\022\007\n\003XML\020\014\022\n\n\006STRING"
    "\020\r\022\010\n\004JSON\020\016*:\n\006OpType\022\n\n\006UPSERT\020\000\022\n\n\006UP"
    "DATE\020\001\022\n\n\006DELETE\020\002\022\014\n\010TRUNCATE\020\003B\037H\001P\001Z\031"
    "fivetran.com/fivetran_sdkb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false,
    false,
    2033,
    descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once,
    descriptor_table_common_2eproto_deps,
    1,
    16,
    schemas,
    file_default_instances,
    TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto,
    file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace fivetran_sdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextField_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool TextField_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ConfigurationFormRequest::_Internal {
 public:
};

ConfigurationFormRequest::ConfigurationFormRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.ConfigurationFormRequest)
}
ConfigurationFormRequest::ConfigurationFormRequest(const ConfigurationFormRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ConfigurationFormRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.ConfigurationFormRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigurationFormRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigurationFormRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationFormRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}
// ===================================================================

class ConfigurationFormResponse::_Internal {
 public:
};

ConfigurationFormResponse::ConfigurationFormResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.ConfigurationFormResponse)
}
ConfigurationFormResponse::ConfigurationFormResponse(const ConfigurationFormResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigurationFormResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.tests_){from._impl_.tests_}
    , decltype(_impl_.schema_selection_supported_) {}

    , decltype(_impl_.table_selection_supported_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.schema_selection_supported_, &from._impl_.schema_selection_supported_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.table_selection_supported_) -
    reinterpret_cast<char*>(&_impl_.schema_selection_supported_)) + sizeof(_impl_.table_selection_supported_));
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.ConfigurationFormResponse)
}

inline void ConfigurationFormResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.tests_){arena}
    , decltype(_impl_.schema_selection_supported_) { false }

    , decltype(_impl_.table_selection_supported_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigurationFormResponse::~ConfigurationFormResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.ConfigurationFormResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigurationFormResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_fields()->~RepeatedPtrField();
  _internal_mutable_tests()->~RepeatedPtrField();
}

void ConfigurationFormResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigurationFormResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.ConfigurationFormResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fields()->Clear();
  _internal_mutable_tests()->Clear();
  ::memset(&_impl_.schema_selection_supported_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.table_selection_supported_) -
      reinterpret_cast<char*>(&_impl_.schema_selection_supported_)) + sizeof(_impl_.table_selection_supported_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationFormResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool schema_selection_supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.schema_selection_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool table_selection_supported = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.table_selection_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .fivetran_sdk.FormField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .fivetran_sdk.ConfigurationTest tests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfigurationFormResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.ConfigurationFormResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool schema_selection_supported = 1;
  if (this->_internal_schema_selection_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_schema_selection_supported(), target);
  }

  // bool table_selection_supported = 2;
  if (this->_internal_table_selection_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_table_selection_supported(), target);
  }

  // repeated .fivetran_sdk.FormField fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .fivetran_sdk.ConfigurationTest tests = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tests_size()); i < n; i++) {
    const auto& repfield = this->_internal_tests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.ConfigurationFormResponse)
  return target;
}

::size_t ConfigurationFormResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.ConfigurationFormResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fivetran_sdk.FormField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_internal_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fivetran_sdk.ConfigurationTest tests = 4;
  total_size += 1UL * this->_internal_tests_size();
  for (const auto& msg : this->_internal_tests()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool schema_selection_supported = 1;
  if (this->_internal_schema_selection_supported() != 0) {
    total_size += 2;
  }

  // bool table_selection_supported = 2;
  if (this->_internal_table_selection_supported() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigurationFormResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigurationFormResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigurationFormResponse::GetClassData() const { return &_class_data_; }


void ConfigurationFormResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigurationFormResponse*>(&to_msg);
  auto& from = static_cast<const ConfigurationFormResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.ConfigurationFormResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fields()->MergeFrom(from._internal_fields());
  _this->_internal_mutable_tests()->MergeFrom(from._internal_tests());
  if (from._internal_schema_selection_supported() != 0) {
    _this->_internal_set_schema_selection_supported(from._internal_schema_selection_supported());
  }
  if (from._internal_table_selection_supported() != 0) {
    _this->_internal_set_table_selection_supported(from._internal_table_selection_supported());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigurationFormResponse::CopyFrom(const ConfigurationFormResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.ConfigurationFormResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationFormResponse::IsInitialized() const {
  return true;
}

void ConfigurationFormResponse::InternalSwap(ConfigurationFormResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_fields()->InternalSwap(other->_internal_mutable_fields());
  _internal_mutable_tests()->InternalSwap(other->_internal_mutable_tests());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationFormResponse, _impl_.table_selection_supported_)
      + sizeof(ConfigurationFormResponse::_impl_.table_selection_supported_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationFormResponse, _impl_.schema_selection_supported_)>(
          reinterpret_cast<char*>(&_impl_.schema_selection_supported_),
          reinterpret_cast<char*>(&other->_impl_.schema_selection_supported_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationFormResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}
// ===================================================================

class FormField::_Internal {
 public:
  using HasBits = decltype(std::declval<FormField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FormField, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::FormField, _impl_._oneof_case_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fivetran_sdk::DropdownField& dropdown_field(const FormField* msg);
  static const ::fivetran_sdk::ToggleField& toggle_field(const FormField* msg);
};

const ::fivetran_sdk::DropdownField&
FormField::_Internal::dropdown_field(const FormField* msg) {
  return *msg->_impl_.type_.dropdown_field_;
}
const ::fivetran_sdk::ToggleField&
FormField::_Internal::toggle_field(const FormField* msg) {
  return *msg->_impl_.type_.toggle_field_;
}
void FormField::set_allocated_dropdown_field(::fivetran_sdk::DropdownField* dropdown_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (dropdown_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dropdown_field);
    if (message_arena != submessage_arena) {
      dropdown_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropdown_field, submessage_arena);
    }
    set_has_dropdown_field();
    _impl_.type_.dropdown_field_ = dropdown_field;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.FormField.dropdown_field)
}
void FormField::set_allocated_toggle_field(::fivetran_sdk::ToggleField* toggle_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (toggle_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(toggle_field);
    if (message_arena != submessage_arena) {
      toggle_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggle_field, submessage_arena);
    }
    set_has_toggle_field();
    _impl_.type_.toggle_field_ = toggle_field;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.FormField.toggle_field)
}
FormField::FormField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.FormField)
}
FormField::FormField(const FormField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.required_) {}

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.required_ = from._impl_.required_;
  clear_has_type();
  switch (from.type_case()) {
    case kTextField: {
      _this->_internal_set_text_field(from._internal_text_field());
      break;
    }
    case kDropdownField: {
      _this->_internal_mutable_dropdown_field()->::fivetran_sdk::DropdownField::MergeFrom(
          from._internal_dropdown_field());
      break;
    }
    case kToggleField: {
      _this->_internal_mutable_toggle_field()->::fivetran_sdk::ToggleField::MergeFrom(
          from._internal_toggle_field());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.FormField)
}

inline void FormField::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.required_) { false }

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_type();
}

FormField::~FormField() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.FormField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormField::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.label_.Destroy();
  _impl_.description_.Destroy();
  if (has_type()) {
    clear_type();
  }
}

void FormField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormField::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.FormField)
  switch (type_case()) {
    case kTextField: {
      // No need to clear
      break;
    }
    case kDropdownField: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.dropdown_field_;
      }
      break;
    }
    case kToggleField: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.toggle_field_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void FormField::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.FormField)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.description_.ClearNonDefaultToEmpty();
  }
  _impl_.required_ = false;
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.FormField.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.FormField.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.FormField.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.TextField text_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_text_field(static_cast<::fivetran_sdk::TextField>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.DropdownField dropdown_field = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropdown_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.ToggleField toggle_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FormField::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.FormField)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.FormField.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.FormField.label");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool required = 3;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_required(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.FormField.description");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  switch (type_case()) {
    case kTextField: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this->_internal_text_field(), target);
      break;
    }
    case kDropdownField: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::dropdown_field(this),
          _Internal::dropdown_field(this).GetCachedSize(), target, stream);
      break;
    }
    case kToggleField: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::toggle_field(this),
          _Internal::toggle_field(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.FormField)
  return target;
}

::size_t FormField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.FormField)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // optional string description = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // bool required = 3;
  if (this->_internal_required() != 0) {
    total_size += 2;
  }

  switch (type_case()) {
    // .fivetran_sdk.TextField text_field = 5;
    case kTextField: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_text_field());
      break;
    }
    // .fivetran_sdk.DropdownField dropdown_field = 6;
    case kDropdownField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.dropdown_field_);
      break;
    }
    // .fivetran_sdk.ToggleField toggle_field = 7;
    case kToggleField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.toggle_field_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormField::GetClassData() const { return &_class_data_; }


void FormField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormField*>(&to_msg);
  auto& from = static_cast<const FormField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.FormField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_required() != 0) {
    _this->_internal_set_required(from._internal_required());
  }
  switch (from.type_case()) {
    case kTextField: {
      _this->_internal_set_text_field(from._internal_text_field());
      break;
    }
    case kDropdownField: {
      _this->_internal_mutable_dropdown_field()->::fivetran_sdk::DropdownField::MergeFrom(
          from._internal_dropdown_field());
      break;
    }
    case kToggleField: {
      _this->_internal_mutable_toggle_field()->::fivetran_sdk::ToggleField::MergeFrom(
          from._internal_toggle_field());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormField::CopyFrom(const FormField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.FormField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormField::IsInitialized() const {
  return true;
}

void FormField::InternalSwap(FormField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);

  swap(_impl_.required_, other->_impl_.required_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}
// ===================================================================

class DropdownField::_Internal {
 public:
};

DropdownField::DropdownField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.DropdownField)
}
DropdownField::DropdownField(const DropdownField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropdownField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dropdown_field_){from._impl_.dropdown_field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.DropdownField)
}

inline void DropdownField::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dropdown_field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropdownField::~DropdownField() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.DropdownField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropdownField::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dropdown_field()->~RepeatedPtrField();
}

void DropdownField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropdownField::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.DropdownField)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dropdown_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropdownField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dropdown_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dropdown_field();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.DropdownField.dropdown_field"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DropdownField::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.DropdownField)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dropdown_field = 1;
  for (int i = 0, n = this->_internal_dropdown_field_size(); i < n; ++i) {
    const auto& s = this->_internal_dropdown_field(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DropdownField.dropdown_field");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.DropdownField)
  return target;
}

::size_t DropdownField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.DropdownField)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dropdown_field = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_dropdown_field().size());
  for (int i = 0, n = _internal_dropdown_field().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_dropdown_field().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropdownField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropdownField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropdownField::GetClassData() const { return &_class_data_; }


void DropdownField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropdownField*>(&to_msg);
  auto& from = static_cast<const DropdownField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.DropdownField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dropdown_field()->MergeFrom(from._internal_dropdown_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropdownField::CopyFrom(const DropdownField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.DropdownField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropdownField::IsInitialized() const {
  return true;
}

void DropdownField::InternalSwap(DropdownField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_dropdown_field()->InternalSwap(
      other->_internal_mutable_dropdown_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata DropdownField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}
// ===================================================================

class ToggleField::_Internal {
 public:
};

ToggleField::ToggleField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.ToggleField)
}
ToggleField::ToggleField(const ToggleField& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ToggleField* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.ToggleField)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToggleField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToggleField::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ToggleField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}
// ===================================================================

class ConfigurationTest::_Internal {
 public:
};

ConfigurationTest::ConfigurationTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.ConfigurationTest)
}
ConfigurationTest::ConfigurationTest(const ConfigurationTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigurationTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.label_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.ConfigurationTest)
}

inline void ConfigurationTest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.label_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigurationTest::~ConfigurationTest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.ConfigurationTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigurationTest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.label_.Destroy();
}

void ConfigurationTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigurationTest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.ConfigurationTest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ConfigurationTest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ConfigurationTest.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfigurationTest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.ConfigurationTest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ConfigurationTest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ConfigurationTest.label");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.ConfigurationTest)
  return target;
}

::size_t ConfigurationTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.ConfigurationTest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigurationTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigurationTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigurationTest::GetClassData() const { return &_class_data_; }


void ConfigurationTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigurationTest*>(&to_msg);
  auto& from = static_cast<const ConfigurationTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.ConfigurationTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigurationTest::CopyFrom(const ConfigurationTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.ConfigurationTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationTest::IsInitialized() const {
  return true;
}

void ConfigurationTest::InternalSwap(ConfigurationTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}
// ===================================================================

TestRequest_ConfigurationEntry_DoNotUse::TestRequest_ConfigurationEntry_DoNotUse() {}
TestRequest_ConfigurationEntry_DoNotUse::TestRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRequest_ConfigurationEntry_DoNotUse::MergeFrom(const TestRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}
// ===================================================================

class TestRequest::_Internal {
 public:
};

TestRequest::TestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.configuration_)*/{}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.TestRequest)
}

inline void TestRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.TestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.name_.Destroy();
}

void TestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.TestRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TestRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.TestRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TestRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // map<string, string> configuration = 2;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TestRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TestRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.TestRequest)
  return target;
}

::size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.TestRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += TestRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequest::GetClassData() const { return &_class_data_; }


void TestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRequest*>(&to_msg);
  auto& from = static_cast<const TestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.TestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}
// ===================================================================

class TestResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TestResponse, _impl_._oneof_case_);
};

TestResponse::TestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.TestResponse)
}
TestResponse::TestResponse(const TestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.TestResponse)
}

inline void TestResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.TestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void TestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.TestResponse)
  switch (response_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.TestResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TestResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.TestResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_success(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TestResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.TestResponse)
  return target;
}

::size_t TestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.TestResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool success = 1;
    case kSuccess: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestResponse::GetClassData() const { return &_class_data_; }


void TestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestResponse*>(&to_msg);
  auto& from = static_cast<const TestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.TestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestResponse::CopyFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const {
  return true;
}

void TestResponse::InternalSwap(TestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}
// ===================================================================

class SchemaList::_Internal {
 public:
};

SchemaList::SchemaList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.SchemaList)
}
SchemaList::SchemaList(const SchemaList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SchemaList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schemas_){from._impl_.schemas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.SchemaList)
}

inline void SchemaList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.schemas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SchemaList::~SchemaList() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.SchemaList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchemaList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_schemas()->~RepeatedPtrField();
}

void SchemaList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchemaList::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.SchemaList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_schemas()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .fivetran_sdk.Schema schemas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schemas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SchemaList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.SchemaList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Schema schemas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schemas_size()); i < n; i++) {
    const auto& repfield = this->_internal_schemas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.SchemaList)
  return target;
}

::size_t SchemaList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.SchemaList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Schema schemas = 1;
  total_size += 1UL * this->_internal_schemas_size();
  for (const auto& msg : this->_internal_schemas()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchemaList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SchemaList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchemaList::GetClassData() const { return &_class_data_; }


void SchemaList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SchemaList*>(&to_msg);
  auto& from = static_cast<const SchemaList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.SchemaList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_schemas()->MergeFrom(from._internal_schemas());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchemaList::CopyFrom(const SchemaList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.SchemaList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaList::IsInitialized() const {
  return true;
}

void SchemaList::InternalSwap(SchemaList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_schemas()->InternalSwap(other->_internal_mutable_schemas());
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}
// ===================================================================

class TableList::_Internal {
 public:
};

TableList::TableList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.TableList)
}
TableList::TableList(const TableList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){from._impl_.tables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.TableList)
}

inline void TableList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableList::~TableList() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.TableList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tables()->~RepeatedPtrField();
}

void TableList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableList::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.TableList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tables()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .fivetran_sdk.Table tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TableList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.TableList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Table tables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.TableList)
  return target;
}

::size_t TableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.TableList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Table tables = 1;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->_internal_tables()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableList::GetClassData() const { return &_class_data_; }


void TableList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableList*>(&to_msg);
  auto& from = static_cast<const TableList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.TableList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tables()->MergeFrom(from._internal_tables());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableList::CopyFrom(const TableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.TableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableList::IsInitialized() const {
  return true;
}

void TableList::InternalSwap(TableList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tables()->InternalSwap(other->_internal_mutable_tables());
}

::PROTOBUF_NAMESPACE_ID::Metadata TableList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}
// ===================================================================

class Schema::_Internal {
 public:
};

Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Schema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){from._impl_.tables_}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.Schema)
}

inline void Schema::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){arena}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.Schema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Schema::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tables()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Schema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.Schema)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tables()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.Schema.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .fivetran_sdk.Table tables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Schema::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.Schema)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.Schema.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .fivetran_sdk.Table tables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.Schema)
  return target;
}

::size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.Schema)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Table tables = 2;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->_internal_tables()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Schema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Schema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Schema::GetClassData() const { return &_class_data_; }


void Schema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Schema*>(&to_msg);
  auto& from = static_cast<const Schema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.Schema)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tables()->MergeFrom(from._internal_tables());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tables()->InternalSwap(other->_internal_mutable_tables());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}
// ===================================================================

class DecimalParams::_Internal {
 public:
};

DecimalParams::DecimalParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.DecimalParams)
}
DecimalParams::DecimalParams(const DecimalParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.DecimalParams)
}

inline void DecimalParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.precision_) { 0u }

    , decltype(_impl_.scale_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DecimalParams::~DecimalParams() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.DecimalParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecimalParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecimalParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DecimalParams::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.DecimalParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precision_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecimalParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DecimalParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.DecimalParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 precision = 1;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_precision(), target);
  }

  // uint32 scale = 2;
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.DecimalParams)
  return target;
}

::size_t DecimalParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.DecimalParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 precision = 1;
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_precision());
  }

  // uint32 scale = 2;
  if (this->_internal_scale() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_scale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecimalParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DecimalParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecimalParams::GetClassData() const { return &_class_data_; }


void DecimalParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DecimalParams*>(&to_msg);
  auto& from = static_cast<const DecimalParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.DecimalParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecimalParams::CopyFrom(const DecimalParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.DecimalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimalParams::IsInitialized() const {
  return true;
}

void DecimalParams::InternalSwap(DecimalParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecimalParams, _impl_.scale_)
      + sizeof(DecimalParams::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(DecimalParams, _impl_.precision_)>(
          reinterpret_cast<char*>(&_impl_.precision_),
          reinterpret_cast<char*>(&other->_impl_.precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecimalParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}
// ===================================================================

class ValueType::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::ValueType, _impl_._oneof_case_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& naive_date(const ValueType* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& naive_datetime(const ValueType* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& utc_datetime(const ValueType* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ValueType::_Internal::naive_date(const ValueType* msg) {
  return *msg->_impl_.inner_.naive_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ValueType::_Internal::naive_datetime(const ValueType* msg) {
  return *msg->_impl_.inner_.naive_datetime_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ValueType::_Internal::utc_datetime(const ValueType* msg) {
  return *msg->_impl_.inner_.utc_datetime_;
}
void ValueType::set_allocated_naive_date(::PROTOBUF_NAMESPACE_ID::Timestamp* naive_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_inner();
  if (naive_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(naive_date));
    if (message_arena != submessage_arena) {
      naive_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, naive_date, submessage_arena);
    }
    set_has_naive_date();
    _impl_.inner_.naive_date_ = naive_date;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.ValueType.naive_date)
}
void ValueType::clear_naive_date() {
  if (inner_case() == kNaiveDate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.inner_.naive_date_;
    }
    clear_has_inner();
  }
}
void ValueType::set_allocated_naive_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* naive_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_inner();
  if (naive_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(naive_datetime));
    if (message_arena != submessage_arena) {
      naive_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, naive_datetime, submessage_arena);
    }
    set_has_naive_datetime();
    _impl_.inner_.naive_datetime_ = naive_datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.ValueType.naive_datetime)
}
void ValueType::clear_naive_datetime() {
  if (inner_case() == kNaiveDatetime) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.inner_.naive_datetime_;
    }
    clear_has_inner();
  }
}
void ValueType::set_allocated_utc_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* utc_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_inner();
  if (utc_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utc_datetime));
    if (message_arena != submessage_arena) {
      utc_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utc_datetime, submessage_arena);
    }
    set_has_utc_datetime();
    _impl_.inner_.utc_datetime_ = utc_datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.ValueType.utc_datetime)
}
void ValueType::clear_utc_datetime() {
  if (inner_case() == kUtcDatetime) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.inner_.utc_datetime_;
    }
    clear_has_inner();
  }
}
ValueType::ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.ValueType)
}
ValueType::ValueType(const ValueType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inner_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kNull: {
      _this->_internal_set_null(from._internal_null());
      break;
    }
    case kBool: {
      _this->_internal_set_bool_(from._internal_bool_());
      break;
    }
    case kShort: {
      _this->_internal_set_short_(from._internal_short_());
      break;
    }
    case kInt: {
      _this->_internal_set_int_(from._internal_int_());
      break;
    }
    case kLong: {
      _this->_internal_set_long_(from._internal_long_());
      break;
    }
    case kFloat: {
      _this->_internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _this->_internal_set_double_(from._internal_double_());
      break;
    }
    case kNaiveDate: {
      _this->_internal_mutable_naive_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_naive_date());
      break;
    }
    case kNaiveDatetime: {
      _this->_internal_mutable_naive_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_naive_datetime());
      break;
    }
    case kUtcDatetime: {
      _this->_internal_mutable_utc_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_utc_datetime());
      break;
    }
    case kDecimal: {
      _this->_internal_set_decimal(from._internal_decimal());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kJson: {
      _this->_internal_set_json(from._internal_json());
      break;
    }
    case kXml: {
      _this->_internal_set_xml(from._internal_xml());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.ValueType)
}

inline void ValueType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.inner_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_inner();
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.ValueType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void ValueType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueType::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.ValueType)
  switch (inner_case()) {
    case kNull: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kShort: {
      // No need to clear
      break;
    }
    case kInt: {
      // No need to clear
      break;
    }
    case kLong: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kNaiveDate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.inner_.naive_date_;
      }
      break;
    }
    case kNaiveDatetime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.inner_.naive_datetime_;
      }
      break;
    }
    case kUtcDatetime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.inner_.utc_datetime_;
      }
      break;
    }
    case kDecimal: {
      _impl_.inner_.decimal_.Destroy();
      break;
    }
    case kBinary: {
      _impl_.inner_.binary_.Destroy();
      break;
    }
    case kString: {
      _impl_.inner_.string_.Destroy();
      break;
    }
    case kJson: {
      _impl_.inner_.json_.Destroy();
      break;
    }
    case kXml: {
      _impl_.inner_.xml_.Destroy();
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INNER_NOT_SET;
}


void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.ValueType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_null(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 short = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_short_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_int_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 long = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_long_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp naive_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_naive_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp naive_datetime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_naive_datetime(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp utc_datetime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_utc_datetime(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string decimal = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_decimal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ValueType.decimal"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes binary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ValueType.string"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string json = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ValueType.json"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string xml = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_xml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.ValueType.xml"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValueType::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.ValueType)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (inner_case()) {
    case kNull: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_null(), target);
      break;
    }
    case kBool: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this->_internal_bool_(), target);
      break;
    }
    case kShort: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          3, this->_internal_short_(), target);
      break;
    }
    case kInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          4, this->_internal_int_(), target);
      break;
    }
    case kLong: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          5, this->_internal_long_(), target);
      break;
    }
    case kFloat: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          6, this->_internal_float_(), target);
      break;
    }
    case kDouble: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this->_internal_double_(), target);
      break;
    }
    case kNaiveDate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::naive_date(this),
          _Internal::naive_date(this).GetCachedSize(), target, stream);
      break;
    }
    case kNaiveDatetime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::naive_datetime(this),
          _Internal::naive_datetime(this).GetCachedSize(), target, stream);
      break;
    }
    case kUtcDatetime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::utc_datetime(this),
          _Internal::utc_datetime(this).GetCachedSize(), target, stream);
      break;
    }
    case kDecimal: {
      const std::string& _s = this->_internal_decimal();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ValueType.decimal");
      target = stream->WriteStringMaybeAliased(11, _s, target);
      break;
    }
    case kBinary: {
      const std::string& _s = this->_internal_binary();
      target = stream->WriteBytesMaybeAliased(12, _s, target);
      break;
    }
    case kString: {
      const std::string& _s = this->_internal_string();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ValueType.string");
      target = stream->WriteStringMaybeAliased(13, _s, target);
      break;
    }
    case kJson: {
      const std::string& _s = this->_internal_json();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ValueType.json");
      target = stream->WriteStringMaybeAliased(14, _s, target);
      break;
    }
    case kXml: {
      const std::string& _s = this->_internal_xml();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.ValueType.xml");
      target = stream->WriteStringMaybeAliased(15, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.ValueType)
  return target;
}

::size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.ValueType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // bool null = 1;
    case kNull: {
      total_size += 2;
      break;
    }
    // bool bool = 2;
    case kBool: {
      total_size += 2;
      break;
    }
    // int32 short = 3;
    case kShort: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_short_());
      break;
    }
    // int32 int = 4;
    case kInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_int_());
      break;
    }
    // int64 long = 5;
    case kLong: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_long_());
      break;
    }
    // float float = 6;
    case kFloat: {
      total_size += 5;
      break;
    }
    // double double = 7;
    case kDouble: {
      total_size += 9;
      break;
    }
    // .google.protobuf.Timestamp naive_date = 8;
    case kNaiveDate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inner_.naive_date_);
      break;
    }
    // .google.protobuf.Timestamp naive_datetime = 9;
    case kNaiveDatetime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inner_.naive_datetime_);
      break;
    }
    // .google.protobuf.Timestamp utc_datetime = 10;
    case kUtcDatetime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inner_.utc_datetime_);
      break;
    }
    // string decimal = 11;
    case kDecimal: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_decimal());
      break;
    }
    // bytes binary = 12;
    case kBinary: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_binary());
      break;
    }
    // string string = 13;
    case kString: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string());
      break;
    }
    // string json = 14;
    case kJson: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_json());
      break;
    }
    // string xml = 15;
    case kXml: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_xml());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueType::GetClassData() const { return &_class_data_; }


void ValueType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueType*>(&to_msg);
  auto& from = static_cast<const ValueType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.ValueType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kNull: {
      _this->_internal_set_null(from._internal_null());
      break;
    }
    case kBool: {
      _this->_internal_set_bool_(from._internal_bool_());
      break;
    }
    case kShort: {
      _this->_internal_set_short_(from._internal_short_());
      break;
    }
    case kInt: {
      _this->_internal_set_int_(from._internal_int_());
      break;
    }
    case kLong: {
      _this->_internal_set_long_(from._internal_long_());
      break;
    }
    case kFloat: {
      _this->_internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _this->_internal_set_double_(from._internal_double_());
      break;
    }
    case kNaiveDate: {
      _this->_internal_mutable_naive_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_naive_date());
      break;
    }
    case kNaiveDatetime: {
      _this->_internal_mutable_naive_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_naive_datetime());
      break;
    }
    case kUtcDatetime: {
      _this->_internal_mutable_utc_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_utc_datetime());
      break;
    }
    case kDecimal: {
      _this->_internal_set_decimal(from._internal_decimal());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kJson: {
      _this->_internal_set_json(from._internal_json());
      break;
    }
    case kXml: {
      _this->_internal_set_xml(from._internal_xml());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType::IsInitialized() const {
  return true;
}

void ValueType::InternalSwap(ValueType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.inner_, other->_impl_.inner_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}
// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Table* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){from._impl_.columns_}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.Table)
}

inline void Table::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){arena}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.Table)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Table::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_columns()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Table::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.Table)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_columns()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.Table.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .fivetran_sdk.Column columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Table::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.Table)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.Table.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .fivetran_sdk.Column columns = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_columns_size()); i < n; i++) {
    const auto& repfield = this->_internal_columns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.Table)
  return target;
}

::size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.Table)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fivetran_sdk.Column columns = 2;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->_internal_columns()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Table::GetClassData() const { return &_class_data_; }


void Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Table*>(&to_msg);
  auto& from = static_cast<const Table&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.Table)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns()->MergeFrom(from._internal_columns());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_columns()->InternalSwap(other->_internal_mutable_columns());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}
// ===================================================================

class Column::_Internal {
 public:
  using HasBits = decltype(std::declval<Column>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Column, _impl_._has_bits_);
  static const ::fivetran_sdk::DecimalParams& decimal(const Column* msg);
  static void set_has_decimal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fivetran_sdk::DecimalParams&
Column::_Internal::decimal(const Column* msg) {
  return *msg->_impl_.decimal_;
}
Column::Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Column* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.decimal_){nullptr}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.primary_key_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.decimal_ = new ::fivetran_sdk::DecimalParams(*from._impl_.decimal_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.primary_key_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.primary_key_));
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.Column)
}

inline void Column::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.decimal_){nullptr}
    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.primary_key_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.Column)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Column::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.decimal_;
}

void Column::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.Column)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.decimal_ != nullptr);
    _impl_.decimal_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.primary_key_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.primary_key_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Column::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.Column.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fivetran_sdk::DataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.primary_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .fivetran_sdk.DecimalParams decimal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Column::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.Column)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.Column.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .fivetran_sdk.DataType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // bool primary_key = 3;
  if (this->_internal_primary_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_primary_key(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .fivetran_sdk.DecimalParams decimal = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::decimal(this),
        _Internal::decimal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.Column)
  return target;
}

::size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.Column)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // optional .fivetran_sdk.DecimalParams decimal = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.decimal_);
  }

  // .fivetran_sdk.DataType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool primary_key = 3;
  if (this->_internal_primary_key() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Column::GetClassData() const { return &_class_data_; }


void Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Column*>(&to_msg);
  auto& from = static_cast<const Column&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.Column)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_decimal()->::fivetran_sdk::DecimalParams::MergeFrom(
        from._internal_decimal());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_primary_key() != 0) {
    _this->_internal_set_primary_key(from._internal_primary_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Column, _impl_.primary_key_)
      + sizeof(Column::_impl_.primary_key_)
      - PROTOBUF_FIELD_OFFSET(Column, _impl_.decimal_)>(
          reinterpret_cast<char*>(&_impl_.decimal_),
          reinterpret_cast<char*>(&other->_impl_.decimal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace fivetran_sdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fivetran_sdk::ConfigurationFormRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::ConfigurationFormRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::ConfigurationFormRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::ConfigurationFormResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::ConfigurationFormResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::ConfigurationFormResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::FormField*
Arena::CreateMaybeMessage< ::fivetran_sdk::FormField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::FormField >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::DropdownField*
Arena::CreateMaybeMessage< ::fivetran_sdk::DropdownField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::DropdownField >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::ToggleField*
Arena::CreateMaybeMessage< ::fivetran_sdk::ToggleField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::ToggleField >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::ConfigurationTest*
Arena::CreateMaybeMessage< ::fivetran_sdk::ConfigurationTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::ConfigurationTest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TestRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TestRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::TestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TestResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::TestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::SchemaList*
Arena::CreateMaybeMessage< ::fivetran_sdk::SchemaList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::SchemaList >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TableList*
Arena::CreateMaybeMessage< ::fivetran_sdk::TableList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TableList >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::Schema*
Arena::CreateMaybeMessage< ::fivetran_sdk::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::DecimalParams*
Arena::CreateMaybeMessage< ::fivetran_sdk::DecimalParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::DecimalParams >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::ValueType*
Arena::CreateMaybeMessage< ::fivetran_sdk::ValueType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::ValueType >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::Table*
Arena::CreateMaybeMessage< ::fivetran_sdk::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::Column*
Arena::CreateMaybeMessage< ::fivetran_sdk::Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::Column >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
