// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: destination_sdk.proto

#include "destination_sdk.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace fivetran_sdk {
template <typename>
PROTOBUF_CONSTEXPR DescribeTableRequest_ConfigurationEntry_DoNotUse::DescribeTableRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DescribeTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DescribeTableRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _DescribeTableRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DescribeTableRequest::DescribeTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.schema_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.table_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeTableRequestDefaultTypeInternal() {}
  union {
    DescribeTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeTableRequestDefaultTypeInternal _DescribeTableRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DescribeTableResponse::DescribeTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DescribeTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeTableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeTableResponseDefaultTypeInternal() {}
  union {
    DescribeTableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeTableResponseDefaultTypeInternal _DescribeTableResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateTableRequest_ConfigurationEntry_DoNotUse::CreateTableRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CreateTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateTableRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _CreateTableRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateTableRequest::CreateTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.schema_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.table_)*/nullptr} {}
struct CreateTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableRequestDefaultTypeInternal() {}
  union {
    CreateTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateTableResponse::CreateTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CreateTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableResponseDefaultTypeInternal() {}
  union {
    CreateTableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableResponseDefaultTypeInternal _CreateTableResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AlterTableRequest_ConfigurationEntry_DoNotUse::AlterTableRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AlterTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AlterTableRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _AlterTableRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AlterTableRequest::AlterTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.schema_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.table_)*/nullptr} {}
struct AlterTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableRequestDefaultTypeInternal() {}
  union {
    AlterTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableRequestDefaultTypeInternal _AlterTableRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AlterTableResponse::AlterTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AlterTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableResponseDefaultTypeInternal() {}
  union {
    AlterTableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableResponseDefaultTypeInternal _AlterTableResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TruncateRequest_ConfigurationEntry_DoNotUse::TruncateRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TruncateRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TruncateRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TruncateRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TruncateRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TruncateRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _TruncateRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TruncateRequest::TruncateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.schema_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.table_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.synced_column_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.utc_delete_before_)*/nullptr
  , /*decltype(_impl_.soft_)*/nullptr} {}
struct TruncateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TruncateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TruncateRequestDefaultTypeInternal() {}
  union {
    TruncateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TruncateRequestDefaultTypeInternal _TruncateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SoftTruncate::SoftTruncate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deleted_column_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SoftTruncateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftTruncateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftTruncateDefaultTypeInternal() {}
  union {
    SoftTruncate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftTruncateDefaultTypeInternal _SoftTruncate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TruncateResponse::TruncateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TruncateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TruncateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TruncateResponseDefaultTypeInternal() {}
  union {
    TruncateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TruncateResponseDefaultTypeInternal _TruncateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WriteBatchRequest_ConfigurationEntry_DoNotUse::WriteBatchRequest_ConfigurationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct WriteBatchRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteBatchRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteBatchRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteBatchRequest_ConfigurationEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteBatchRequest_ConfigurationEntry_DoNotUseDefaultTypeInternal _WriteBatchRequest_ConfigurationEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WriteBatchRequest_KeysEntry_DoNotUse::WriteBatchRequest_KeysEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct WriteBatchRequest_KeysEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteBatchRequest_KeysEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteBatchRequest_KeysEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteBatchRequest_KeysEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteBatchRequest_KeysEntry_DoNotUseDefaultTypeInternal _WriteBatchRequest_KeysEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WriteBatchRequest::WriteBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.configuration_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.replace_files_)*/{}
  , /*decltype(_impl_.update_files_)*/{}
  , /*decltype(_impl_.delete_files_)*/{}
  , /*decltype(_impl_.schema_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.file_params_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WriteBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteBatchRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteBatchRequestDefaultTypeInternal() {}
  union {
    WriteBatchRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteBatchRequestDefaultTypeInternal _WriteBatchRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CsvFileParams::CsvFileParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.null_string_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unmodified_string_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.compression_)*/ 0

  , /*decltype(_impl_.encryption_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CsvFileParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CsvFileParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CsvFileParamsDefaultTypeInternal() {}
  union {
    CsvFileParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CsvFileParamsDefaultTypeInternal _CsvFileParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WriteBatchResponse::WriteBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WriteBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteBatchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteBatchResponseDefaultTypeInternal() {}
  union {
    WriteBatchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteBatchResponseDefaultTypeInternal _WriteBatchResponse_default_instance_;
}  // namespace fivetran_sdk
static ::_pb::Metadata file_level_metadata_destination_5fsdk_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_destination_5fsdk_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_destination_5fsdk_2eproto = nullptr;
const ::uint32_t TableStruct_destination_5fsdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest, _impl_.configuration_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest, _impl_.schema_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableRequest, _impl_.table_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableResponse, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest, _impl_.configuration_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest, _impl_.schema_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableRequest, _impl_.table_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableResponse, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest, _impl_.configuration_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest, _impl_.schema_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableRequest, _impl_.table_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableResponse, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.configuration_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.schema_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.table_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.synced_column_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.utc_delete_before_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateRequest, _impl_.soft_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::SoftTruncate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::SoftTruncate, _impl_.deleted_column_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateResponse, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.configuration_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.schema_name_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.table_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.replace_files_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.update_files_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.delete_files_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_.file_params_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CsvFileParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CsvFileParams, _impl_.compression_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CsvFileParams, _impl_.encryption_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CsvFileParams, _impl_.null_string_),
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CsvFileParams, _impl_.unmodified_string_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchResponse, _impl_.response_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse)},
        { 12, -1, -1, sizeof(::fivetran_sdk::DescribeTableRequest)},
        { 23, -1, -1, sizeof(::fivetran_sdk::DescribeTableResponse)},
        { 35, 45, -1, sizeof(::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse)},
        { 47, 58, -1, sizeof(::fivetran_sdk::CreateTableRequest)},
        { 61, -1, -1, sizeof(::fivetran_sdk::CreateTableResponse)},
        { 72, 82, -1, sizeof(::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse)},
        { 84, 95, -1, sizeof(::fivetran_sdk::AlterTableRequest)},
        { 98, -1, -1, sizeof(::fivetran_sdk::AlterTableResponse)},
        { 109, 119, -1, sizeof(::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse)},
        { 121, 135, -1, sizeof(::fivetran_sdk::TruncateRequest)},
        { 141, -1, -1, sizeof(::fivetran_sdk::SoftTruncate)},
        { 150, -1, -1, sizeof(::fivetran_sdk::TruncateResponse)},
        { 161, 171, -1, sizeof(::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse)},
        { 173, 183, -1, sizeof(::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse)},
        { 185, 202, -1, sizeof(::fivetran_sdk::WriteBatchRequest)},
        { 210, -1, -1, sizeof(::fivetran_sdk::CsvFileParams)},
        { 222, -1, -1, sizeof(::fivetran_sdk::WriteBatchResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::fivetran_sdk::_DescribeTableRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_DescribeTableRequest_default_instance_._instance,
    &::fivetran_sdk::_DescribeTableResponse_default_instance_._instance,
    &::fivetran_sdk::_CreateTableRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_CreateTableRequest_default_instance_._instance,
    &::fivetran_sdk::_CreateTableResponse_default_instance_._instance,
    &::fivetran_sdk::_AlterTableRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_AlterTableRequest_default_instance_._instance,
    &::fivetran_sdk::_AlterTableResponse_default_instance_._instance,
    &::fivetran_sdk::_TruncateRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_TruncateRequest_default_instance_._instance,
    &::fivetran_sdk::_SoftTruncate_default_instance_._instance,
    &::fivetran_sdk::_TruncateResponse_default_instance_._instance,
    &::fivetran_sdk::_WriteBatchRequest_ConfigurationEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_WriteBatchRequest_KeysEntry_DoNotUse_default_instance_._instance,
    &::fivetran_sdk::_WriteBatchRequest_default_instance_._instance,
    &::fivetran_sdk::_CsvFileParams_default_instance_._instance,
    &::fivetran_sdk::_WriteBatchResponse_default_instance_._instance,
};
const char descriptor_table_protodef_destination_5fsdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025destination_sdk.proto\022\014fivetran_sdk\032\037g"
    "oogle/protobuf/timestamp.proto\032\014common.p"
    "roto\"\303\001\n\024DescribeTableRequest\022L\n\rconfigu"
    "ration\030\001 \003(\01325.fivetran_sdk.DescribeTabl"
    "eRequest.ConfigurationEntry\022\023\n\013schema_na"
    "me\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\0324\n\022Configur"
    "ationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"q\n\025DescribeTableResponse\022\023\n\tnot_found"
    "\030\001 \001(\010H\000\022\021\n\007failure\030\002 \001(\tH\000\022$\n\005table\030\003 \001"
    "(\0132\023.fivetran_sdk.TableH\000B\n\n\010response\"\317\001"
    "\n\022CreateTableRequest\022J\n\rconfiguration\030\001 "
    "\003(\01323.fivetran_sdk.CreateTableRequest.Co"
    "nfigurationEntry\022\023\n\013schema_name\030\002 \001(\t\022\"\n"
    "\005table\030\003 \001(\0132\023.fivetran_sdk.Table\0324\n\022Con"
    "figurationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
    "\001(\t:\0028\001\"G\n\023CreateTableResponse\022\021\n\007succes"
    "s\030\001 \001(\010H\000\022\021\n\007failure\030\002 \001(\tH\000B\n\n\010response"
    "\"\315\001\n\021AlterTableRequest\022I\n\rconfiguration\030"
    "\001 \003(\01322.fivetran_sdk.AlterTableRequest.C"
    "onfigurationEntry\022\023\n\013schema_name\030\002 \001(\t\022\""
    "\n\005table\030\003 \001(\0132\023.fivetran_sdk.Table\0324\n\022Co"
    "nfigurationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\t:\0028\001\"F\n\022AlterTableResponse\022\021\n\007succes"
    "s\030\001 \001(\010H\000\022\021\n\007failure\030\002 \001(\tH\000B\n\n\010response"
    "\"\277\002\n\017TruncateRequest\022G\n\rconfiguration\030\001 "
    "\003(\01320.fivetran_sdk.TruncateRequest.Confi"
    "gurationEntry\022\023\n\013schema_name\030\002 \001(\t\022\022\n\nta"
    "ble_name\030\003 \001(\t\022\025\n\rsynced_column\030\004 \001(\t\0225\n"
    "\021utc_delete_before\030\005 \001(\0132\032.google.protob"
    "uf.Timestamp\022-\n\004soft\030\006 \001(\0132\032.fivetran_sd"
    "k.SoftTruncateH\000\210\001\001\0324\n\022ConfigurationEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007\n\005_so"
    "ft\"&\n\014SoftTruncate\022\026\n\016deleted_column\030\003 \001"
    "(\t\"D\n\020TruncateResponse\022\021\n\007success\030\001 \001(\010H"
    "\000\022\021\n\007failure\030\002 \001(\tH\000B\n\n\010response\"\261\003\n\021Wri"
    "teBatchRequest\022I\n\rconfiguration\030\001 \003(\01322."
    "fivetran_sdk.WriteBatchRequest.Configura"
    "tionEntry\022\023\n\013schema_name\030\002 \001(\t\022\"\n\005table\030"
    "\003 \001(\0132\023.fivetran_sdk.Table\0227\n\004keys\030\004 \003(\013"
    "2).fivetran_sdk.WriteBatchRequest.KeysEn"
    "try\022\025\n\rreplace_files\030\005 \003(\t\022\024\n\014update_fil"
    "es\030\006 \003(\t\022\024\n\014delete_files\030\007 \003(\t\022*\n\003csv\030\010 "
    "\001(\0132\033.fivetran_sdk.CsvFileParamsH\000\0324\n\022Co"
    "nfigurationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\t:\0028\001\032+\n\tKeysEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\014:\0028\001B\r\n\013file_params\"\235\001\n\rCsvFile"
    "Params\022.\n\013compression\030\001 \001(\0162\031.fivetran_s"
    "dk.Compression\022,\n\nencryption\030\002 \001(\0162\030.fiv"
    "etran_sdk.Encryption\022\023\n\013null_string\030\003 \001("
    "\t\022\031\n\021unmodified_string\030\004 \001(\t\"F\n\022WriteBat"
    "chResponse\022\021\n\007success\030\001 \001(\010H\000\022\021\n\007failure"
    "\030\002 \001(\tH\000B\n\n\010response*\037\n\nEncryption\022\010\n\004NO"
    "NE\020\000\022\007\n\003AES\020\001**\n\013Compression\022\007\n\003OFF\020\000\022\010\n"
    "\004ZSTD\020\001\022\010\n\004GZIP\020\0022\333\004\n\013Destination\022f\n\021Con"
    "figurationForm\022&.fivetran_sdk.Configurat"
    "ionFormRequest\032\'.fivetran_sdk.Configurat"
    "ionFormResponse\"\000\022\?\n\004Test\022\031.fivetran_sdk"
    ".TestRequest\032\032.fivetran_sdk.TestResponse"
    "\"\000\022Z\n\rDescribeTable\022\".fivetran_sdk.Descr"
    "ibeTableRequest\032#.fivetran_sdk.DescribeT"
    "ableResponse\"\000\022T\n\013CreateTable\022 .fivetran"
    "_sdk.CreateTableRequest\032!.fivetran_sdk.C"
    "reateTableResponse\"\000\022Q\n\nAlterTable\022\037.fiv"
    "etran_sdk.AlterTableRequest\032 .fivetran_s"
    "dk.AlterTableResponse\"\000\022K\n\010Truncate\022\035.fi"
    "vetran_sdk.TruncateRequest\032\036.fivetran_sd"
    "k.TruncateResponse\"\000\022Q\n\nWriteBatch\022\037.fiv"
    "etran_sdk.WriteBatchRequest\032 .fivetran_s"
    "dk.WriteBatchResponse\"\000B\037H\001P\001Z\031fivetran."
    "com/fivetran_sdkb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_destination_5fsdk_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_destination_5fsdk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_destination_5fsdk_2eproto = {
    false,
    false,
    2784,
    descriptor_table_protodef_destination_5fsdk_2eproto,
    "destination_sdk.proto",
    &descriptor_table_destination_5fsdk_2eproto_once,
    descriptor_table_destination_5fsdk_2eproto_deps,
    2,
    18,
    schemas,
    file_default_instances,
    TableStruct_destination_5fsdk_2eproto::offsets,
    file_level_metadata_destination_5fsdk_2eproto,
    file_level_enum_descriptors_destination_5fsdk_2eproto,
    file_level_service_descriptors_destination_5fsdk_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_destination_5fsdk_2eproto_getter() {
  return &descriptor_table_destination_5fsdk_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_destination_5fsdk_2eproto(&descriptor_table_destination_5fsdk_2eproto);
namespace fivetran_sdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encryption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_destination_5fsdk_2eproto);
  return file_level_enum_descriptors_destination_5fsdk_2eproto[0];
}
bool Encryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_destination_5fsdk_2eproto);
  return file_level_enum_descriptors_destination_5fsdk_2eproto[1];
}
bool Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

DescribeTableRequest_ConfigurationEntry_DoNotUse::DescribeTableRequest_ConfigurationEntry_DoNotUse() {}
DescribeTableRequest_ConfigurationEntry_DoNotUse::DescribeTableRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DescribeTableRequest_ConfigurationEntry_DoNotUse::MergeFrom(const DescribeTableRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DescribeTableRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[0]);
}
// ===================================================================

class DescribeTableRequest::_Internal {
 public:
};

DescribeTableRequest::DescribeTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.DescribeTableRequest)
}
DescribeTableRequest::DescribeTableRequest(const DescribeTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.configuration_)*/{}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.DescribeTableRequest)
}

inline void DescribeTableRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeTableRequest::~DescribeTableRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.DescribeTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.schema_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void DescribeTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.DescribeTableRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.schema_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.DescribeTableRequest.schema_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.DescribeTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DescribeTableRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.DescribeTableRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DescribeTableRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DescribeTableRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DescribeTableRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    const std::string& _s = this->_internal_schema_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DescribeTableRequest.schema_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    const std::string& _s = this->_internal_table_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DescribeTableRequest.table_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.DescribeTableRequest)
  return target;
}

::size_t DescribeTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.DescribeTableRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += DescribeTableRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schema_name());
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeTableRequest::GetClassData() const { return &_class_data_; }


void DescribeTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeTableRequest*>(&to_msg);
  auto& from = static_cast<const DescribeTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.DescribeTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeTableRequest::CopyFrom(const DescribeTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.DescribeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeTableRequest::IsInitialized() const {
  return true;
}

void DescribeTableRequest::InternalSwap(DescribeTableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_name_, lhs_arena,
                                       &other->_impl_.schema_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.table_name_, lhs_arena,
                                       &other->_impl_.table_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[1]);
}
// ===================================================================

class DescribeTableResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::DescribeTableResponse, _impl_._oneof_case_);
  static const ::fivetran_sdk::Table& table(const DescribeTableResponse* msg);
};

const ::fivetran_sdk::Table&
DescribeTableResponse::_Internal::table(const DescribeTableResponse* msg) {
  return *msg->_impl_.response_.table_;
}
void DescribeTableResponse::set_allocated_table(::fivetran_sdk::Table* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table));
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    _impl_.response_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.DescribeTableResponse.table)
}
void DescribeTableResponse::clear_table() {
  if (response_case() == kTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.table_;
    }
    clear_has_response();
  }
}
DescribeTableResponse::DescribeTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.DescribeTableResponse)
}
DescribeTableResponse::DescribeTableResponse(const DescribeTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kNotFound: {
      _this->_internal_set_not_found(from._internal_not_found());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case kTable: {
      _this->_internal_mutable_table()->::fivetran_sdk::Table::MergeFrom(
          from._internal_table());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.DescribeTableResponse)
}

inline void DescribeTableResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

DescribeTableResponse::~DescribeTableResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.DescribeTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeTableResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void DescribeTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeTableResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.DescribeTableResponse)
  switch (response_case()) {
    case kNotFound: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case kTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.table_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void DescribeTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.DescribeTableResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool not_found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_not_found(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.DescribeTableResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.Table table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DescribeTableResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.DescribeTableResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kNotFound: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_not_found(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.DescribeTableResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kTable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::table(this),
          _Internal::table(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.DescribeTableResponse)
  return target;
}

::size_t DescribeTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.DescribeTableResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool not_found = 1;
    case kNotFound: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    // .fivetran_sdk.Table table = 3;
    case kTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.table_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeTableResponse::GetClassData() const { return &_class_data_; }


void DescribeTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeTableResponse*>(&to_msg);
  auto& from = static_cast<const DescribeTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.DescribeTableResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kNotFound: {
      _this->_internal_set_not_found(from._internal_not_found());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case kTable: {
      _this->_internal_mutable_table()->::fivetran_sdk::Table::MergeFrom(
          from._internal_table());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeTableResponse::CopyFrom(const DescribeTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.DescribeTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeTableResponse::IsInitialized() const {
  return true;
}

void DescribeTableResponse::InternalSwap(DescribeTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[2]);
}
// ===================================================================

CreateTableRequest_ConfigurationEntry_DoNotUse::CreateTableRequest_ConfigurationEntry_DoNotUse() {}
CreateTableRequest_ConfigurationEntry_DoNotUse::CreateTableRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateTableRequest_ConfigurationEntry_DoNotUse::MergeFrom(const CreateTableRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateTableRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[3]);
}
// ===================================================================

class CreateTableRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateTableRequest, _impl_._has_bits_);
  static const ::fivetran_sdk::Table& table(const CreateTableRequest* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fivetran_sdk::Table&
CreateTableRequest::_Internal::table(const CreateTableRequest* msg) {
  return *msg->_impl_.table_;
}
void CreateTableRequest::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CreateTableRequest::CreateTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.CreateTableRequest)
}
CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.table_ = new ::fivetran_sdk::Table(*from._impl_.table_);
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.CreateTableRequest)
}

inline void CreateTableRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.CreateTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.schema_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_;
}

void CreateTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.CreateTableRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.schema_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.table_ != nullptr);
    _impl_.table_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.CreateTableRequest.schema_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.Table table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateTableRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.CreateTableRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CreateTableRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CreateTableRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CreateTableRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    const std::string& _s = this->_internal_schema_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CreateTableRequest.schema_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .fivetran_sdk.Table table = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.CreateTableRequest)
  return target;
}

::size_t CreateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.CreateTableRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += CreateTableRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schema_name());
  }

  // .fivetran_sdk.Table table = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableRequest::GetClassData() const { return &_class_data_; }


void CreateTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableRequest*>(&to_msg);
  auto& from = static_cast<const CreateTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.CreateTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_table()->::fivetran_sdk::Table::MergeFrom(
        from._internal_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  return true;
}

void CreateTableRequest::InternalSwap(CreateTableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_name_, lhs_arena,
                                       &other->_impl_.schema_name_, rhs_arena);
  swap(_impl_.table_, other->_impl_.table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[4]);
}
// ===================================================================

class CreateTableResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::CreateTableResponse, _impl_._oneof_case_);
};

CreateTableResponse::CreateTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.CreateTableResponse)
}
CreateTableResponse::CreateTableResponse(const CreateTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.CreateTableResponse)
}

inline void CreateTableResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

CreateTableResponse::~CreateTableResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.CreateTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void CreateTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.CreateTableResponse)
  switch (response_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void CreateTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.CreateTableResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.CreateTableResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateTableResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.CreateTableResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_success(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CreateTableResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.CreateTableResponse)
  return target;
}

::size_t CreateTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.CreateTableResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool success = 1;
    case kSuccess: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableResponse::GetClassData() const { return &_class_data_; }


void CreateTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableResponse*>(&to_msg);
  auto& from = static_cast<const CreateTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.CreateTableResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableResponse::CopyFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponse::IsInitialized() const {
  return true;
}

void CreateTableResponse::InternalSwap(CreateTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[5]);
}
// ===================================================================

AlterTableRequest_ConfigurationEntry_DoNotUse::AlterTableRequest_ConfigurationEntry_DoNotUse() {}
AlterTableRequest_ConfigurationEntry_DoNotUse::AlterTableRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlterTableRequest_ConfigurationEntry_DoNotUse::MergeFrom(const AlterTableRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlterTableRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[6]);
}
// ===================================================================

class AlterTableRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AlterTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AlterTableRequest, _impl_._has_bits_);
  static const ::fivetran_sdk::Table& table(const AlterTableRequest* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fivetran_sdk::Table&
AlterTableRequest::_Internal::table(const AlterTableRequest* msg) {
  return *msg->_impl_.table_;
}
void AlterTableRequest::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AlterTableRequest::AlterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.AlterTableRequest)
}
AlterTableRequest::AlterTableRequest(const AlterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.table_ = new ::fivetran_sdk::Table(*from._impl_.table_);
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.AlterTableRequest)
}

inline void AlterTableRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlterTableRequest::~AlterTableRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.AlterTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.schema_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_;
}

void AlterTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.AlterTableRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.schema_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.table_ != nullptr);
    _impl_.table_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.AlterTableRequest.schema_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.Table table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AlterTableRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.AlterTableRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AlterTableRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.AlterTableRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.AlterTableRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    const std::string& _s = this->_internal_schema_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.AlterTableRequest.schema_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .fivetran_sdk.Table table = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.AlterTableRequest)
  return target;
}

::size_t AlterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.AlterTableRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += AlterTableRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schema_name());
  }

  // .fivetran_sdk.Table table = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterTableRequest::GetClassData() const { return &_class_data_; }


void AlterTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterTableRequest*>(&to_msg);
  auto& from = static_cast<const AlterTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.AlterTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_table()->::fivetran_sdk::Table::MergeFrom(
        from._internal_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterTableRequest::CopyFrom(const AlterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.AlterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterTableRequest::IsInitialized() const {
  return true;
}

void AlterTableRequest::InternalSwap(AlterTableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_name_, lhs_arena,
                                       &other->_impl_.schema_name_, rhs_arena);
  swap(_impl_.table_, other->_impl_.table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[7]);
}
// ===================================================================

class AlterTableResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::AlterTableResponse, _impl_._oneof_case_);
};

AlterTableResponse::AlterTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.AlterTableResponse)
}
AlterTableResponse::AlterTableResponse(const AlterTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.AlterTableResponse)
}

inline void AlterTableResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

AlterTableResponse::~AlterTableResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.AlterTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterTableResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void AlterTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterTableResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.AlterTableResponse)
  switch (response_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void AlterTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.AlterTableResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.AlterTableResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AlterTableResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.AlterTableResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_success(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.AlterTableResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.AlterTableResponse)
  return target;
}

::size_t AlterTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.AlterTableResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool success = 1;
    case kSuccess: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterTableResponse::GetClassData() const { return &_class_data_; }


void AlterTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterTableResponse*>(&to_msg);
  auto& from = static_cast<const AlterTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.AlterTableResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterTableResponse::CopyFrom(const AlterTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.AlterTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterTableResponse::IsInitialized() const {
  return true;
}

void AlterTableResponse::InternalSwap(AlterTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[8]);
}
// ===================================================================

TruncateRequest_ConfigurationEntry_DoNotUse::TruncateRequest_ConfigurationEntry_DoNotUse() {}
TruncateRequest_ConfigurationEntry_DoNotUse::TruncateRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TruncateRequest_ConfigurationEntry_DoNotUse::MergeFrom(const TruncateRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TruncateRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[9]);
}
// ===================================================================

class TruncateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TruncateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TruncateRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& utc_delete_before(const TruncateRequest* msg);
  static void set_has_utc_delete_before(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fivetran_sdk::SoftTruncate& soft(const TruncateRequest* msg);
  static void set_has_soft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TruncateRequest::_Internal::utc_delete_before(const TruncateRequest* msg) {
  return *msg->_impl_.utc_delete_before_;
}
const ::fivetran_sdk::SoftTruncate&
TruncateRequest::_Internal::soft(const TruncateRequest* msg) {
  return *msg->_impl_.soft_;
}
void TruncateRequest::clear_utc_delete_before() {
  if (_impl_.utc_delete_before_ != nullptr) _impl_.utc_delete_before_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TruncateRequest::TruncateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.TruncateRequest)
}
TruncateRequest::TruncateRequest(const TruncateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TruncateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_name_) {}

    , decltype(_impl_.synced_column_) {}

    , decltype(_impl_.utc_delete_before_){nullptr}
    , decltype(_impl_.soft_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), _this->GetArenaForAllocation());
  }
  _impl_.synced_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.synced_column_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_synced_column().empty()) {
    _this->_impl_.synced_column_.Set(from._internal_synced_column(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.utc_delete_before_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.utc_delete_before_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.soft_ = new ::fivetran_sdk::SoftTruncate(*from._impl_.soft_);
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.TruncateRequest)
}

inline void TruncateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_name_) {}

    , decltype(_impl_.synced_column_) {}

    , decltype(_impl_.utc_delete_before_){nullptr}
    , decltype(_impl_.soft_){nullptr}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.synced_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.synced_column_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TruncateRequest::~TruncateRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.TruncateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TruncateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.schema_name_.Destroy();
  _impl_.table_name_.Destroy();
  _impl_.synced_column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.utc_delete_before_;
  if (this != internal_default_instance()) delete _impl_.soft_;
}

void TruncateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TruncateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.TruncateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.schema_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _impl_.synced_column_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.utc_delete_before_ != nullptr);
      _impl_.utc_delete_before_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.soft_ != nullptr);
      _impl_.soft_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TruncateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TruncateRequest.schema_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TruncateRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string synced_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_synced_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TruncateRequest.synced_column"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp utc_delete_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_utc_delete_before(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .fivetran_sdk.SoftTruncate soft = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_soft(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TruncateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.TruncateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TruncateRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    const std::string& _s = this->_internal_schema_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateRequest.schema_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    const std::string& _s = this->_internal_table_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateRequest.table_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string synced_column = 4;
  if (!this->_internal_synced_column().empty()) {
    const std::string& _s = this->_internal_synced_column();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateRequest.synced_column");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp utc_delete_before = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::utc_delete_before(this),
        _Internal::utc_delete_before(this).GetCachedSize(), target, stream);
  }

  // optional .fivetran_sdk.SoftTruncate soft = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::soft(this),
        _Internal::soft(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.TruncateRequest)
  return target;
}

::size_t TruncateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.TruncateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += TruncateRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schema_name());
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_table_name());
  }

  // string synced_column = 4;
  if (!this->_internal_synced_column().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_synced_column());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp utc_delete_before = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.utc_delete_before_);
    }

    // optional .fivetran_sdk.SoftTruncate soft = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soft_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TruncateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TruncateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TruncateRequest::GetClassData() const { return &_class_data_; }


void TruncateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TruncateRequest*>(&to_msg);
  auto& from = static_cast<const TruncateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.TruncateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_synced_column().empty()) {
    _this->_internal_set_synced_column(from._internal_synced_column());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_utc_delete_before()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_utc_delete_before());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_soft()->::fivetran_sdk::SoftTruncate::MergeFrom(
          from._internal_soft());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TruncateRequest::CopyFrom(const TruncateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.TruncateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateRequest::IsInitialized() const {
  return true;
}

void TruncateRequest::InternalSwap(TruncateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_name_, lhs_arena,
                                       &other->_impl_.schema_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.table_name_, lhs_arena,
                                       &other->_impl_.table_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.synced_column_, lhs_arena,
                                       &other->_impl_.synced_column_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TruncateRequest, _impl_.soft_)
      + sizeof(TruncateRequest::_impl_.soft_)
      - PROTOBUF_FIELD_OFFSET(TruncateRequest, _impl_.utc_delete_before_)>(
          reinterpret_cast<char*>(&_impl_.utc_delete_before_),
          reinterpret_cast<char*>(&other->_impl_.utc_delete_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[10]);
}
// ===================================================================

class SoftTruncate::_Internal {
 public:
};

SoftTruncate::SoftTruncate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.SoftTruncate)
}
SoftTruncate::SoftTruncate(const SoftTruncate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SoftTruncate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_column_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deleted_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deleted_column_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_column().empty()) {
    _this->_impl_.deleted_column_.Set(from._internal_deleted_column(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.SoftTruncate)
}

inline void SoftTruncate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_column_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deleted_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deleted_column_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SoftTruncate::~SoftTruncate() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.SoftTruncate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SoftTruncate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deleted_column_.Destroy();
}

void SoftTruncate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SoftTruncate::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.SoftTruncate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deleted_column_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftTruncate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deleted_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deleted_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.SoftTruncate.deleted_column"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SoftTruncate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.SoftTruncate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deleted_column = 3;
  if (!this->_internal_deleted_column().empty()) {
    const std::string& _s = this->_internal_deleted_column();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.SoftTruncate.deleted_column");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.SoftTruncate)
  return target;
}

::size_t SoftTruncate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.SoftTruncate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deleted_column = 3;
  if (!this->_internal_deleted_column().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deleted_column());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SoftTruncate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SoftTruncate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SoftTruncate::GetClassData() const { return &_class_data_; }


void SoftTruncate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SoftTruncate*>(&to_msg);
  auto& from = static_cast<const SoftTruncate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.SoftTruncate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deleted_column().empty()) {
    _this->_internal_set_deleted_column(from._internal_deleted_column());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SoftTruncate::CopyFrom(const SoftTruncate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.SoftTruncate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftTruncate::IsInitialized() const {
  return true;
}

void SoftTruncate::InternalSwap(SoftTruncate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deleted_column_, lhs_arena,
                                       &other->_impl_.deleted_column_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftTruncate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[11]);
}
// ===================================================================

class TruncateResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::TruncateResponse, _impl_._oneof_case_);
};

TruncateResponse::TruncateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.TruncateResponse)
}
TruncateResponse::TruncateResponse(const TruncateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TruncateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.TruncateResponse)
}

inline void TruncateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

TruncateResponse::~TruncateResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.TruncateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TruncateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void TruncateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TruncateResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.TruncateResponse)
  switch (response_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void TruncateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.TruncateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TruncateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.TruncateResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TruncateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.TruncateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_success(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.TruncateResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.TruncateResponse)
  return target;
}

::size_t TruncateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.TruncateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool success = 1;
    case kSuccess: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TruncateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TruncateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TruncateResponse::GetClassData() const { return &_class_data_; }


void TruncateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TruncateResponse*>(&to_msg);
  auto& from = static_cast<const TruncateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.TruncateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TruncateResponse::CopyFrom(const TruncateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.TruncateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateResponse::IsInitialized() const {
  return true;
}

void TruncateResponse::InternalSwap(TruncateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[12]);
}
// ===================================================================

WriteBatchRequest_ConfigurationEntry_DoNotUse::WriteBatchRequest_ConfigurationEntry_DoNotUse() {}
WriteBatchRequest_ConfigurationEntry_DoNotUse::WriteBatchRequest_ConfigurationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteBatchRequest_ConfigurationEntry_DoNotUse::MergeFrom(const WriteBatchRequest_ConfigurationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteBatchRequest_ConfigurationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[13]);
}
// ===================================================================

WriteBatchRequest_KeysEntry_DoNotUse::WriteBatchRequest_KeysEntry_DoNotUse() {}
WriteBatchRequest_KeysEntry_DoNotUse::WriteBatchRequest_KeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteBatchRequest_KeysEntry_DoNotUse::MergeFrom(const WriteBatchRequest_KeysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteBatchRequest_KeysEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[14]);
}
// ===================================================================

class WriteBatchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteBatchRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WriteBatchRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchRequest, _impl_._oneof_case_);
  static const ::fivetran_sdk::Table& table(const WriteBatchRequest* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fivetran_sdk::CsvFileParams& csv(const WriteBatchRequest* msg);
};

const ::fivetran_sdk::Table&
WriteBatchRequest::_Internal::table(const WriteBatchRequest* msg) {
  return *msg->_impl_.table_;
}
const ::fivetran_sdk::CsvFileParams&
WriteBatchRequest::_Internal::csv(const WriteBatchRequest* msg) {
  return *msg->_impl_.file_params_.csv_;
}
void WriteBatchRequest::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WriteBatchRequest::set_allocated_csv(::fivetran_sdk::CsvFileParams* csv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_params();
  if (csv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(csv);
    if (message_arena != submessage_arena) {
      csv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csv, submessage_arena);
    }
    set_has_csv();
    _impl_.file_params_.csv_ = csv;
  }
  // @@protoc_insertion_point(field_set_allocated:fivetran_sdk.WriteBatchRequest.csv)
}
WriteBatchRequest::WriteBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.WriteBatchRequest)
}
WriteBatchRequest::WriteBatchRequest(const WriteBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{}
    , /*decltype(_impl_.keys_)*/{}
    , decltype(_impl_.replace_files_){from._impl_.replace_files_}
    , decltype(_impl_.update_files_){from._impl_.update_files_}
    , decltype(_impl_.delete_files_){from._impl_.delete_files_}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.file_params_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.table_ = new ::fivetran_sdk::Table(*from._impl_.table_);
  }
  clear_has_file_params();
  switch (from.file_params_case()) {
    case kCsv: {
      _this->_internal_mutable_csv()->::fivetran_sdk::CsvFileParams::MergeFrom(
          from._internal_csv());
      break;
    }
    case FILE_PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.WriteBatchRequest)
}

inline void WriteBatchRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configuration_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.keys_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.replace_files_){arena}
    , decltype(_impl_.update_files_){arena}
    , decltype(_impl_.delete_files_){arena}
    , decltype(_impl_.schema_name_) {}

    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.file_params_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_file_params();
}

WriteBatchRequest::~WriteBatchRequest() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.WriteBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteBatchRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuration_.~MapField();
  _impl_.keys_.~MapField();
  _internal_mutable_replace_files()->~RepeatedPtrField();
  _internal_mutable_update_files()->~RepeatedPtrField();
  _internal_mutable_delete_files()->~RepeatedPtrField();
  _impl_.schema_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_;
  if (has_file_params()) {
    clear_file_params();
  }
}

void WriteBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteBatchRequest::clear_file_params() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.WriteBatchRequest)
  switch (file_params_case()) {
    case kCsv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_params_.csv_;
      }
      break;
    }
    case FILE_PARAMS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FILE_PARAMS_NOT_SET;
}


void WriteBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.WriteBatchRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuration_.Clear();
  _impl_.keys_.Clear();
  _internal_mutable_replace_files()->Clear();
  _internal_mutable_update_files()->Clear();
  _internal_mutable_delete_files()->Clear();
  _impl_.schema_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.table_ != nullptr);
    _impl_.table_->Clear();
  }
  clear_file_params();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configuration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.WriteBatchRequest.schema_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.Table table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, bytes> keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.keys_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string replace_files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replace_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.WriteBatchRequest.replace_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string update_files = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_update_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.WriteBatchRequest.update_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string delete_files = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_delete_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.WriteBatchRequest.delete_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.CsvFileParams csv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_csv(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WriteBatchRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.WriteBatchRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  if (!this->_internal_configuration().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = WriteBatchRequest_ConfigurationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.configuration");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.configuration");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    const std::string& _s = this->_internal_schema_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.schema_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .fivetran_sdk.Table table = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> keys = 4;
  if (!this->_internal_keys().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = WriteBatchRequest_KeysEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_keys();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.keys");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string replace_files = 5;
  for (int i = 0, n = this->_internal_replace_files_size(); i < n; ++i) {
    const auto& s = this->_internal_replace_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.replace_files");
    target = stream->WriteString(5, s, target);
  }

  // repeated string update_files = 6;
  for (int i = 0, n = this->_internal_update_files_size(); i < n; ++i) {
    const auto& s = this->_internal_update_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.update_files");
    target = stream->WriteString(6, s, target);
  }

  // repeated string delete_files = 7;
  for (int i = 0, n = this->_internal_delete_files_size(); i < n; ++i) {
    const auto& s = this->_internal_delete_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchRequest.delete_files");
    target = stream->WriteString(7, s, target);
  }

  // .fivetran_sdk.CsvFileParams csv = 8;
  if (file_params_case() == kCsv) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::csv(this),
        _Internal::csv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.WriteBatchRequest)
  return target;
}

::size_t WriteBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.WriteBatchRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration().begin();
      it != this->_internal_configuration().end(); ++it) {
    total_size += WriteBatchRequest_ConfigurationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keys_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_keys().begin();
      it != this->_internal_keys().end(); ++it) {
    total_size += WriteBatchRequest_KeysEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string replace_files = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_replace_files().size());
  for (int i = 0, n = _internal_replace_files().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_replace_files().Get(i));
  }

  // repeated string update_files = 6;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_update_files().size());
  for (int i = 0, n = _internal_update_files().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_update_files().Get(i));
  }

  // repeated string delete_files = 7;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_delete_files().size());
  for (int i = 0, n = _internal_delete_files().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_delete_files().Get(i));
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schema_name());
  }

  // .fivetran_sdk.Table table = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  switch (file_params_case()) {
    // .fivetran_sdk.CsvFileParams csv = 8;
    case kCsv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_params_.csv_);
      break;
    }
    case FILE_PARAMS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteBatchRequest::GetClassData() const { return &_class_data_; }


void WriteBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteBatchRequest*>(&to_msg);
  auto& from = static_cast<const WriteBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.WriteBatchRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuration_.MergeFrom(from._impl_.configuration_);
  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_mutable_replace_files()->MergeFrom(from._internal_replace_files());
  _this->_internal_mutable_update_files()->MergeFrom(from._internal_update_files());
  _this->_internal_mutable_delete_files()->MergeFrom(from._internal_delete_files());
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_table()->::fivetran_sdk::Table::MergeFrom(
        from._internal_table());
  }
  switch (from.file_params_case()) {
    case kCsv: {
      _this->_internal_mutable_csv()->::fivetran_sdk::CsvFileParams::MergeFrom(
          from._internal_csv());
      break;
    }
    case FILE_PARAMS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteBatchRequest::CopyFrom(const WriteBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.WriteBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBatchRequest::IsInitialized() const {
  return true;
}

void WriteBatchRequest::InternalSwap(WriteBatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.configuration_.InternalSwap(&other->_impl_.configuration_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _internal_mutable_replace_files()->InternalSwap(
      other->_internal_mutable_replace_files());
  _internal_mutable_update_files()->InternalSwap(
      other->_internal_mutable_update_files());
  _internal_mutable_delete_files()->InternalSwap(
      other->_internal_mutable_delete_files());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_name_, lhs_arena,
                                       &other->_impl_.schema_name_, rhs_arena);
  swap(_impl_.table_, other->_impl_.table_);
  swap(_impl_.file_params_, other->_impl_.file_params_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[15]);
}
// ===================================================================

class CsvFileParams::_Internal {
 public:
};

CsvFileParams::CsvFileParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.CsvFileParams)
}
CsvFileParams::CsvFileParams(const CsvFileParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CsvFileParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.null_string_) {}

    , decltype(_impl_.unmodified_string_) {}

    , decltype(_impl_.compression_) {}

    , decltype(_impl_.encryption_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.null_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.null_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_null_string().empty()) {
    _this->_impl_.null_string_.Set(from._internal_null_string(), _this->GetArenaForAllocation());
  }
  _impl_.unmodified_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unmodified_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unmodified_string().empty()) {
    _this->_impl_.unmodified_string_.Set(from._internal_unmodified_string(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compression_, &from._impl_.compression_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.encryption_) -
    reinterpret_cast<char*>(&_impl_.compression_)) + sizeof(_impl_.encryption_));
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.CsvFileParams)
}

inline void CsvFileParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.null_string_) {}

    , decltype(_impl_.unmodified_string_) {}

    , decltype(_impl_.compression_) { 0 }

    , decltype(_impl_.encryption_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.null_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.null_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unmodified_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unmodified_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CsvFileParams::~CsvFileParams() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.CsvFileParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CsvFileParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.null_string_.Destroy();
  _impl_.unmodified_string_.Destroy();
}

void CsvFileParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CsvFileParams::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.CsvFileParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.null_string_.ClearToEmpty();
  _impl_.unmodified_string_.ClearToEmpty();
  ::memset(&_impl_.compression_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.encryption_) -
      reinterpret_cast<char*>(&_impl_.compression_)) + sizeof(_impl_.encryption_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsvFileParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fivetran_sdk.Compression compression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::fivetran_sdk::Compression>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .fivetran_sdk.Encryption encryption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::fivetran_sdk::Encryption>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string null_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_null_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.CsvFileParams.null_string"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string unmodified_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_unmodified_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.CsvFileParams.unmodified_string"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CsvFileParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.CsvFileParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fivetran_sdk.Compression compression = 1;
  if (this->_internal_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_compression(), target);
  }

  // .fivetran_sdk.Encryption encryption = 2;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_encryption(), target);
  }

  // string null_string = 3;
  if (!this->_internal_null_string().empty()) {
    const std::string& _s = this->_internal_null_string();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CsvFileParams.null_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string unmodified_string = 4;
  if (!this->_internal_unmodified_string().empty()) {
    const std::string& _s = this->_internal_unmodified_string();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.CsvFileParams.unmodified_string");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.CsvFileParams)
  return target;
}

::size_t CsvFileParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.CsvFileParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string null_string = 3;
  if (!this->_internal_null_string().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_null_string());
  }

  // string unmodified_string = 4;
  if (!this->_internal_unmodified_string().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unmodified_string());
  }

  // .fivetran_sdk.Compression compression = 1;
  if (this->_internal_compression() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_compression());
  }

  // .fivetran_sdk.Encryption encryption = 2;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CsvFileParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CsvFileParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CsvFileParams::GetClassData() const { return &_class_data_; }


void CsvFileParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CsvFileParams*>(&to_msg);
  auto& from = static_cast<const CsvFileParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.CsvFileParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_null_string().empty()) {
    _this->_internal_set_null_string(from._internal_null_string());
  }
  if (!from._internal_unmodified_string().empty()) {
    _this->_internal_set_unmodified_string(from._internal_unmodified_string());
  }
  if (from._internal_compression() != 0) {
    _this->_internal_set_compression(from._internal_compression());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CsvFileParams::CopyFrom(const CsvFileParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.CsvFileParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsvFileParams::IsInitialized() const {
  return true;
}

void CsvFileParams::InternalSwap(CsvFileParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.null_string_, lhs_arena,
                                       &other->_impl_.null_string_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unmodified_string_, lhs_arena,
                                       &other->_impl_.unmodified_string_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CsvFileParams, _impl_.encryption_)
      + sizeof(CsvFileParams::_impl_.encryption_)
      - PROTOBUF_FIELD_OFFSET(CsvFileParams, _impl_.compression_)>(
          reinterpret_cast<char*>(&_impl_.compression_),
          reinterpret_cast<char*>(&other->_impl_.compression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CsvFileParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[16]);
}
// ===================================================================

class WriteBatchResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::fivetran_sdk::WriteBatchResponse, _impl_._oneof_case_);
};

WriteBatchResponse::WriteBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:fivetran_sdk.WriteBatchResponse)
}
WriteBatchResponse::WriteBatchResponse(const WriteBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fivetran_sdk.WriteBatchResponse)
}

inline void WriteBatchResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

WriteBatchResponse::~WriteBatchResponse() {
  // @@protoc_insertion_point(destructor:fivetran_sdk.WriteBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteBatchResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void WriteBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteBatchResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:fivetran_sdk.WriteBatchResponse)
  switch (response_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      _impl_.response_.failure_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void WriteBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fivetran_sdk.WriteBatchResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fivetran_sdk.WriteBatchResponse.failure"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WriteBatchResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fivetran_sdk.WriteBatchResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_success(), target);
      break;
    }
    case kFailure: {
      const std::string& _s = this->_internal_failure();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "fivetran_sdk.WriteBatchResponse.failure");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fivetran_sdk.WriteBatchResponse)
  return target;
}

::size_t WriteBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fivetran_sdk.WriteBatchResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bool success = 1;
    case kSuccess: {
      total_size += 2;
      break;
    }
    // string failure = 2;
    case kFailure: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteBatchResponse::GetClassData() const { return &_class_data_; }


void WriteBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteBatchResponse*>(&to_msg);
  auto& from = static_cast<const WriteBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fivetran_sdk.WriteBatchResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kSuccess: {
      _this->_internal_set_success(from._internal_success());
      break;
    }
    case kFailure: {
      _this->_internal_set_failure(from._internal_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteBatchResponse::CopyFrom(const WriteBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fivetran_sdk.WriteBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBatchResponse::IsInitialized() const {
  return true;
}

void WriteBatchResponse::InternalSwap(WriteBatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_destination_5fsdk_2eproto_getter, &descriptor_table_destination_5fsdk_2eproto_once,
      file_level_metadata_destination_5fsdk_2eproto[17]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace fivetran_sdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::DescribeTableRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::DescribeTableRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::DescribeTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::DescribeTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::DescribeTableResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::DescribeTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::DescribeTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::CreateTableRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::CreateTableRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::CreateTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::CreateTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::CreateTableResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::CreateTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::CreateTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::AlterTableRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::AlterTableRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::AlterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::AlterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::AlterTableResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::AlterTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::AlterTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TruncateRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TruncateRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::TruncateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TruncateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::SoftTruncate*
Arena::CreateMaybeMessage< ::fivetran_sdk::SoftTruncate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::SoftTruncate >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::TruncateResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::TruncateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::TruncateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::WriteBatchRequest_ConfigurationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::WriteBatchRequest_KeysEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::WriteBatchRequest*
Arena::CreateMaybeMessage< ::fivetran_sdk::WriteBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::WriteBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::CsvFileParams*
Arena::CreateMaybeMessage< ::fivetran_sdk::CsvFileParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::CsvFileParams >(arena);
}
template<> PROTOBUF_NOINLINE ::fivetran_sdk::WriteBatchResponse*
Arena::CreateMaybeMessage< ::fivetran_sdk::WriteBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fivetran_sdk::WriteBatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
