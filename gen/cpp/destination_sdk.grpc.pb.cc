// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: destination_sdk.proto

#include "destination_sdk.pb.h"
#include "destination_sdk.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace fivetran_sdk {

static const char* Destination_method_names[] = {
  "/fivetran_sdk.Destination/ConfigurationForm",
  "/fivetran_sdk.Destination/Test",
  "/fivetran_sdk.Destination/DescribeTable",
  "/fivetran_sdk.Destination/CreateTable",
  "/fivetran_sdk.Destination/AlterTable",
  "/fivetran_sdk.Destination/Truncate",
  "/fivetran_sdk.Destination/WriteBatch",
};

std::unique_ptr< Destination::Stub> Destination::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Destination::Stub> stub(new Destination::Stub(channel, options));
  return stub;
}

Destination::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ConfigurationForm_(Destination_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Test_(Destination_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeTable_(Destination_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTable_(Destination_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlterTable_(Destination_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Truncate_(Destination_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteBatch_(Destination_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Destination::Stub::ConfigurationForm(::grpc::ClientContext* context, const ::fivetran_sdk::ConfigurationFormRequest& request, ::fivetran_sdk::ConfigurationFormResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::ConfigurationFormRequest, ::fivetran_sdk::ConfigurationFormResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfigurationForm_, context, request, response);
}

void Destination::Stub::async::ConfigurationForm(::grpc::ClientContext* context, const ::fivetran_sdk::ConfigurationFormRequest* request, ::fivetran_sdk::ConfigurationFormResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::ConfigurationFormRequest, ::fivetran_sdk::ConfigurationFormResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigurationForm_, context, request, response, std::move(f));
}

void Destination::Stub::async::ConfigurationForm(::grpc::ClientContext* context, const ::fivetran_sdk::ConfigurationFormRequest* request, ::fivetran_sdk::ConfigurationFormResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigurationForm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::ConfigurationFormResponse>* Destination::Stub::PrepareAsyncConfigurationFormRaw(::grpc::ClientContext* context, const ::fivetran_sdk::ConfigurationFormRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::ConfigurationFormResponse, ::fivetran_sdk::ConfigurationFormRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfigurationForm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::ConfigurationFormResponse>* Destination::Stub::AsyncConfigurationFormRaw(::grpc::ClientContext* context, const ::fivetran_sdk::ConfigurationFormRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigurationFormRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::Test(::grpc::ClientContext* context, const ::fivetran_sdk::TestRequest& request, ::fivetran_sdk::TestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::TestRequest, ::fivetran_sdk::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Test_, context, request, response);
}

void Destination::Stub::async::Test(::grpc::ClientContext* context, const ::fivetran_sdk::TestRequest* request, ::fivetran_sdk::TestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::TestRequest, ::fivetran_sdk::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, std::move(f));
}

void Destination::Stub::async::Test(::grpc::ClientContext* context, const ::fivetran_sdk::TestRequest* request, ::fivetran_sdk::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::TestResponse>* Destination::Stub::PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::fivetran_sdk::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::TestResponse, ::fivetran_sdk::TestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Test_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::TestResponse>* Destination::Stub::AsyncTestRaw(::grpc::ClientContext* context, const ::fivetran_sdk::TestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::DescribeTable(::grpc::ClientContext* context, const ::fivetran_sdk::DescribeTableRequest& request, ::fivetran_sdk::DescribeTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::DescribeTableRequest, ::fivetran_sdk::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DescribeTable_, context, request, response);
}

void Destination::Stub::async::DescribeTable(::grpc::ClientContext* context, const ::fivetran_sdk::DescribeTableRequest* request, ::fivetran_sdk::DescribeTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::DescribeTableRequest, ::fivetran_sdk::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeTable_, context, request, response, std::move(f));
}

void Destination::Stub::async::DescribeTable(::grpc::ClientContext* context, const ::fivetran_sdk::DescribeTableRequest* request, ::fivetran_sdk::DescribeTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::DescribeTableResponse>* Destination::Stub::PrepareAsyncDescribeTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::DescribeTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::DescribeTableResponse, ::fivetran_sdk::DescribeTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DescribeTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::DescribeTableResponse>* Destination::Stub::AsyncDescribeTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::DescribeTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDescribeTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::CreateTable(::grpc::ClientContext* context, const ::fivetran_sdk::CreateTableRequest& request, ::fivetran_sdk::CreateTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::CreateTableRequest, ::fivetran_sdk::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void Destination::Stub::async::CreateTable(::grpc::ClientContext* context, const ::fivetran_sdk::CreateTableRequest* request, ::fivetran_sdk::CreateTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::CreateTableRequest, ::fivetran_sdk::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void Destination::Stub::async::CreateTable(::grpc::ClientContext* context, const ::fivetran_sdk::CreateTableRequest* request, ::fivetran_sdk::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::CreateTableResponse>* Destination::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::CreateTableResponse, ::fivetran_sdk::CreateTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::CreateTableResponse>* Destination::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::AlterTable(::grpc::ClientContext* context, const ::fivetran_sdk::AlterTableRequest& request, ::fivetran_sdk::AlterTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::AlterTableRequest, ::fivetran_sdk::AlterTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AlterTable_, context, request, response);
}

void Destination::Stub::async::AlterTable(::grpc::ClientContext* context, const ::fivetran_sdk::AlterTableRequest* request, ::fivetran_sdk::AlterTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::AlterTableRequest, ::fivetran_sdk::AlterTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlterTable_, context, request, response, std::move(f));
}

void Destination::Stub::async::AlterTable(::grpc::ClientContext* context, const ::fivetran_sdk::AlterTableRequest* request, ::fivetran_sdk::AlterTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlterTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::AlterTableResponse>* Destination::Stub::PrepareAsyncAlterTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::AlterTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::AlterTableResponse, ::fivetran_sdk::AlterTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AlterTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::AlterTableResponse>* Destination::Stub::AsyncAlterTableRaw(::grpc::ClientContext* context, const ::fivetran_sdk::AlterTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAlterTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::Truncate(::grpc::ClientContext* context, const ::fivetran_sdk::TruncateRequest& request, ::fivetran_sdk::TruncateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::TruncateRequest, ::fivetran_sdk::TruncateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Truncate_, context, request, response);
}

void Destination::Stub::async::Truncate(::grpc::ClientContext* context, const ::fivetran_sdk::TruncateRequest* request, ::fivetran_sdk::TruncateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::TruncateRequest, ::fivetran_sdk::TruncateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, std::move(f));
}

void Destination::Stub::async::Truncate(::grpc::ClientContext* context, const ::fivetran_sdk::TruncateRequest* request, ::fivetran_sdk::TruncateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::TruncateResponse>* Destination::Stub::PrepareAsyncTruncateRaw(::grpc::ClientContext* context, const ::fivetran_sdk::TruncateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::TruncateResponse, ::fivetran_sdk::TruncateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Truncate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::TruncateResponse>* Destination::Stub::AsyncTruncateRaw(::grpc::ClientContext* context, const ::fivetran_sdk::TruncateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTruncateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Destination::Stub::WriteBatch(::grpc::ClientContext* context, const ::fivetran_sdk::WriteBatchRequest& request, ::fivetran_sdk::WriteBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fivetran_sdk::WriteBatchRequest, ::fivetran_sdk::WriteBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteBatch_, context, request, response);
}

void Destination::Stub::async::WriteBatch(::grpc::ClientContext* context, const ::fivetran_sdk::WriteBatchRequest* request, ::fivetran_sdk::WriteBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fivetran_sdk::WriteBatchRequest, ::fivetran_sdk::WriteBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBatch_, context, request, response, std::move(f));
}

void Destination::Stub::async::WriteBatch(::grpc::ClientContext* context, const ::fivetran_sdk::WriteBatchRequest* request, ::fivetran_sdk::WriteBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::WriteBatchResponse>* Destination::Stub::PrepareAsyncWriteBatchRaw(::grpc::ClientContext* context, const ::fivetran_sdk::WriteBatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fivetran_sdk::WriteBatchResponse, ::fivetran_sdk::WriteBatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fivetran_sdk::WriteBatchResponse>* Destination::Stub::AsyncWriteBatchRaw(::grpc::ClientContext* context, const ::fivetran_sdk::WriteBatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

Destination::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::ConfigurationFormRequest, ::fivetran_sdk::ConfigurationFormResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::ConfigurationFormRequest* req,
             ::fivetran_sdk::ConfigurationFormResponse* resp) {
               return service->ConfigurationForm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::TestRequest, ::fivetran_sdk::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::TestRequest* req,
             ::fivetran_sdk::TestResponse* resp) {
               return service->Test(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::DescribeTableRequest, ::fivetran_sdk::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::DescribeTableRequest* req,
             ::fivetran_sdk::DescribeTableResponse* resp) {
               return service->DescribeTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::CreateTableRequest, ::fivetran_sdk::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::CreateTableRequest* req,
             ::fivetran_sdk::CreateTableResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::AlterTableRequest, ::fivetran_sdk::AlterTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::AlterTableRequest* req,
             ::fivetran_sdk::AlterTableResponse* resp) {
               return service->AlterTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::TruncateRequest, ::fivetran_sdk::TruncateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::TruncateRequest* req,
             ::fivetran_sdk::TruncateResponse* resp) {
               return service->Truncate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Destination_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Destination::Service, ::fivetran_sdk::WriteBatchRequest, ::fivetran_sdk::WriteBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Destination::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fivetran_sdk::WriteBatchRequest* req,
             ::fivetran_sdk::WriteBatchResponse* resp) {
               return service->WriteBatch(ctx, req, resp);
             }, this)));
}

Destination::Service::~Service() {
}

::grpc::Status Destination::Service::ConfigurationForm(::grpc::ServerContext* context, const ::fivetran_sdk::ConfigurationFormRequest* request, ::fivetran_sdk::ConfigurationFormResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::Test(::grpc::ServerContext* context, const ::fivetran_sdk::TestRequest* request, ::fivetran_sdk::TestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::DescribeTable(::grpc::ServerContext* context, const ::fivetran_sdk::DescribeTableRequest* request, ::fivetran_sdk::DescribeTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::CreateTable(::grpc::ServerContext* context, const ::fivetran_sdk::CreateTableRequest* request, ::fivetran_sdk::CreateTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::AlterTable(::grpc::ServerContext* context, const ::fivetran_sdk::AlterTableRequest* request, ::fivetran_sdk::AlterTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::Truncate(::grpc::ServerContext* context, const ::fivetran_sdk::TruncateRequest* request, ::fivetran_sdk::TruncateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Destination::Service::WriteBatch(::grpc::ServerContext* context, const ::fivetran_sdk::WriteBatchRequest* request, ::fivetran_sdk::WriteBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fivetran_sdk

